import { checksum } from './asset-checksum.js';
import { glob, readFile, fileExists, mkdir, writeFile, removeFile } from '@shopify/cli-kit/node/fs';
import { joinPath, basename } from '@shopify/cli-kit/node/path';
import { lookupMimeType, setMimeTypes } from '@shopify/cli-kit/node/mimes';
import { outputDebug } from '@shopify/cli-kit/node/output';
const DEFAULT_IGNORE_PATTERNS = [
    '**/.git',
    '**/.vscode',
    '**/.hg',
    '**/.bzr',
    '**/.svn',
    '**/_darcs',
    '**/CVS',
    '**/*.sublime-(project|workspace)',
    '**/.DS_Store',
    '**/.sass-cache',
    '**/Thumbs.db',
    '**/desktop.ini',
    '**/config.yml',
    '**/node_modules/',
    '.prettierrc.json',
];
const THEME_DIRECTORY_PATTERNS = [
    'assets/**/*.*',
    'config/**/*.json',
    'layout/**/*.liquid',
    'locales/**/*.json',
    'sections/**/*.{liquid,json}',
    'snippets/**/*.liquid',
    'templates/**/*.{liquid,json}',
    'templates/customers/**/*.{liquid,json}',
];
export async function mountThemeFileSystem(root) {
    const filesPaths = await glob(THEME_DIRECTORY_PATTERNS, {
        cwd: root,
        deep: 3,
        ignore: DEFAULT_IGNORE_PATTERNS,
    });
    const assets = await Promise.all(filesPaths.map(async (key) => {
        return checksum(root, key).then((checksum) => {
            return {
                key,
                checksum,
            };
        });
    }));
    const files = new Map(assets.map((asset) => [asset.key, asset]));
    return {
        root,
        files,
    };
}
export async function writeThemeFile(root, { key, attachment, value }) {
    const absolutePath = joinPath(root, key);
    await ensureDirExists(absolutePath);
    if (attachment) {
        const data = Buffer.from(attachment, 'base64');
        await writeFile(absolutePath, data, { encoding: 'base64' });
    }
    else {
        const data = value ?? '';
        await writeFile(absolutePath, data);
    }
}
export async function readThemeFile(root, path) {
    const options = isTextFile(path) ? { encoding: 'utf8' } : {};
    const absolutePath = joinPath(root, path);
    const themeFileExists = await fileExists(absolutePath);
    if (!themeFileExists) {
        outputDebug(`File ${absolutePath} can't be read because it doesn't exist...`);
        return;
    }
    return readFile(absolutePath, options);
}
export async function removeThemeFile(root, path) {
    const absolutePath = joinPath(root, path);
    const themeFileExists = await fileExists(absolutePath);
    if (!themeFileExists) {
        outputDebug(`File ${absolutePath} can't be removed because it doesn't exist...`);
        return;
    }
    await removeFile(absolutePath);
}
export function isThemeAsset(path) {
    return path.startsWith('assets/');
}
export function isJson(path) {
    return lookupMimeType(path) === 'application/json';
}
export function isTextFile(path) {
    setMimeTypes({
        liquid: 'application/liquid',
        sass: 'text/x-sass',
        scss: 'text/x-scss',
    });
    const textFileTypes = [
        'application/javascript',
        'application/json',
        'application/liquid',
        'text/css',
        'text/x-sass',
        'text/x-scss',
    ];
    return textFileTypes.includes(lookupMimeType(path));
}
export async function hasRequiredThemeDirectories(path) {
    const directories = new Set(await glob('*', {
        cwd: path,
        deep: 1,
        onlyDirectories: true,
    }));
    const requiredDirectories = ['config', 'layout', 'sections', 'templates'];
    return requiredDirectories.every((dir) => directories.has(dir));
}
async function ensureDirExists(path) {
    const directoryPath = dirPath(path);
    const directoryExists = await fileExists(directoryPath);
    if (directoryExists)
        return;
    await mkdir(directoryPath);
}
function dirPath(filePath) {
    const fileName = basename(filePath);
    const fileNameIndex = filePath.lastIndexOf(fileName);
    return filePath.substring(0, fileNameIndex);
}
//# sourceMappingURL=theme-fs.js.map